(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{150:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"an-interactive-example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#an-interactive-example","aria-hidden":"true"}},[t._v("#")]),t._v(" An Interactive Example")]),t._v(" "),s("p",[t._v("The best example in demonstrating the use of Reactif is calculating total from price and quantity. This way the user might know they can use it in table calculations, and also in updating the user interface instantly. Imagine your data object has calculated values within Releasers, and update(re-render) according to the changes fo values by associator. You can even create a spreadsheet.\nThe following is the example of a simple table created by Reacitf.\n"),s("img",{attrs:{src:"/spreadsheet.gif",alt:"reactif-spreadsheet"}})]),t._v(" "),s("p",[t._v("This is the data structure of the above spreadsheet, that is clean and understandable.")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("    "),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" data "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("act")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        price"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("50")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        qty"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        total"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("Releaser")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" self"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("price"),s("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("self"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("qty"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        discount"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("10")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        final"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("Discounted")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dep"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        dep"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("common")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'set'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{attrs:{class:"token function"}},[t._v("render")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"logging-value-changes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#logging-value-changes","aria-hidden":"true"}},[t._v("#")]),t._v(" Logging value changes")]),t._v(" "),s("p",[t._v("Imagine a system that will log the change if a value is updated. If a property "),s("code",[t._v("x")]),t._v(" of value 5 is updated to 10, the system will log something like that.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v(" X has changed its value from 5 to 10\n")])])]),s("p",[t._v("You can do it in the least amount of code, by the help of Reactif,")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" data "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("act")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("5")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    y"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("8")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dep"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    dep"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("common")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'set'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("prop"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" pastValue "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" dep"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("past")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prop"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" currentValue "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" target"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("prop"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        console"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("log")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token template-string"}},[s("span",{attrs:{class:"token string"}},[t._v("`")]),s("span",{attrs:{class:"token interpolation"}},[s("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("prop"),s("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{attrs:{class:"token string"}},[t._v(" has changed its value from ")]),s("span",{attrs:{class:"token interpolation"}},[s("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("pastValue"),s("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{attrs:{class:"token string"}},[t._v(" to ")]),s("span",{attrs:{class:"token interpolation"}},[s("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("currentValue"),s("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{attrs:{class:"token string"}},[t._v("`")])]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"updating-interface-changes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#updating-interface-changes","aria-hidden":"true"}},[t._v("#")]),t._v(" Updating interface changes")]),t._v(" "),s("p",[t._v("Assuming you have a function that will render the component given as argument, you can update only what should by doing like that.")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("// render is a function that will render what should update")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("// render('button') will render the button element")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reactiveData "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("act")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token comment"}},[t._v("// ... data")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dep"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    dep"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("common")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'set'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("prop"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token comment"}},[t._v("// Compare target with rendered- virtual dom")]),t._v("\n        "),s("span",{attrs:{class:"token comment"}},[t._v("// then ...")]),t._v("\n        "),s("span",{attrs:{class:"token function"}},[t._v("render")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token comment"}},[t._v("// what should re-render)")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"without-interpolaters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#without-interpolaters","aria-hidden":"true"}},[t._v("#")]),t._v(" Without interpolaters")]),t._v(" "),s("p",[t._v("You can do exactly the same as you did with interpolaters without interpolaters. This is a need when you have to work with too much iterated calculation based values because "),s("em",[t._v("you can't use an interpolater inside an interpolater. An interpolater will see another one only as an object.")]),t._v(" For example,")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token function"}},[t._v("act")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    price"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("50")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    qty"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    total"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("Releaser")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" self"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("price"),s("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("self"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("qty"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    tax"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("11")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    final"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("Releaser")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" self"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("total"),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" self"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tax"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("The property will not return a value, instead, it will return a "),s("code",[t._v("NaN")]),t._v(". That it because if will see "),s("code",[t._v("self.total")]),t._v(" as an object, not as a value returned interpolater.\nTo solve this you should create a new interpolater to calculate the final or use the associator to update it value, without being interpolated.")])])}],!1,null,null,null);e.options.__file="example.md";a.default=e.exports}}]);