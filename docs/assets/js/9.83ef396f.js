(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{151:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"concepts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concepts","aria-hidden":"true"}},[t._v("#")]),t._v(" Concepts")]),t._v(" "),s("p",[t._v("The reactivity done by Reactif is actually by the helps of "),s("code",[t._v("Proxy")]),t._v(". You can make the Objects reactive by the function "),s("code",[t._v("act")]),t._v(", the core of the library. What the "),s("code",[t._v("act")]),t._v(" function really did here is accept an object and "),s("em",[t._v("an associator")]),t._v(".(We'll cover about the term associator later) and just pass it through a proxy class, so that it becomes reactive.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/chart.png",alt:""}})]),t._v(" "),s("p",[t._v("The Proxy class will define what to do when a trap (getter or setter) is called. It's basically the same as ES5 getters and setters, but more powerful. In Reactif, ES5 getter/setters are used as polyfill for browsers in which the Proxy will not be supported. But some functionalities will not be available such as "),s("code",[t._v("deleteProperty")]),t._v(" and capablitiy to add properties that instantly will work with the process you defined in each trap.")]),t._v(" "),s("h2",{attrs:{id:"associator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#associator","aria-hidden":"true"}},[t._v("#")]),t._v(" Associator")]),t._v(" "),s("p",[t._v("Associator is a term for the function you defined as the second argument in the "),s("code",[t._v("act")]),t._v(" function, just because it is associated with the traps and the methods you want to work when the traps are called. Simply, it's the place where you have to add these methods aforementioned.")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{attrs:{class:"token function-variable function"}},[t._v("associator")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dep"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    dep"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token keyword"}},[t._v("set")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'x'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("log")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token template-string"}},[s("span",{attrs:{class:"token string"}},[t._v("`x just changed it's value`")])]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" data "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("act")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("associator"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ndata"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),s("span",{attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// 'x just changed it's value'")]),t._v("\n")])])]),s("p",[t._v("Don't be fooled by terms. An associator is just a function with no special properties itself. But when it's used in "),s("code",[t._v("act")]),t._v(" function, it is powerful.")]),t._v(" "),s("h2",{attrs:{id:"interpolater"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interpolater","aria-hidden":"true"}},[t._v("#")]),t._v(" Interpolater")]),t._v(" "),s("p",[t._v("When a reactive property is called, it first run all the methods defined in associator, then gave you the value. And it is where the interpolater is rooted. If a property is an object where its config is determined, it is called interpolated. An object is an interpolated if it has the property "),s("code",[t._v("$$type")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token function"}},[t._v("act")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    message"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        $$type"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'upperCase'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        $$value"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'blah blah'")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("// message is an interpolated")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("// by the interpolater `upperCase`")]),t._v("\n")])])]),s("p",[t._v("In the example, the property message will not be returned as the original value, but through the function you defined as the interpolater "),s("code",[t._v("upperCase")]),t._v(".\nYou can register interpolaters by calling the calss "),s("code",[t._v("interpolater")]),t._v(". You can define configuration as fancy as you want, but even in a simple one it has to have the property "),s("code",[t._v("$$type")]),t._v(", that will indentify what interpolater it is in.")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Interpolater"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'reactif-core'")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Interpolater")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'upperCase'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" config"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$$value"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("toUpperCase")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("// now you can use the previous example in place, it's good")]),t._v("\n")])])]),s("h2",{attrs:{id:"releaser"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#releaser","aria-hidden":"true"}},[t._v("#")]),t._v(" Releaser")]),t._v(" "),s("p",[t._v("In the first example, you might wonder the use of the releaser function. Well, it is just an interpolater registered by the library. If you just look at the code, what it really does is nothing.")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("Releaser")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        $$type"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'Releaser'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        $$value"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" fn\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("It return an object, actually an interpolated object. What the interpolater "),s("code",[t._v("Releaser")]),t._v(" really does is, it runs the function you defined instantly when the getter is called, I mean when the value is called.\nCreating interpolated objects by a function is really neat, clean and make the object more accessible and understandable and it's fully recommended.")])])}],!1,null,null,null);e.options.__file="concepts.md";a.default=e.exports}}]);